Guavascript {
    Program     = Block
    Block       = Statement+
    Statement   = Exp "?" Block ":" Block                         -- conditional
                | id "(" (Param ("," Param)*)? ")"
                  "{" Block "}"                                   -- funcDecl
                | "class" classId "{" Block "}"                         -- classDecl
                | MatchExp                                       -- match
                | "if" Exp "{" Block "}" ("else" "{" Block "}")?  -- ifElse
                | "while" Exp "{" Block "}"                          -- while
                | "for" id "in" IdExp "{" Block "}"                  -- forIn
                | "print" "(" Exp ")"                                   -- print
                | id assignOp (Exp | MatchExp)                          -- assign
                | IdExp                                                 -- identifier
                | "ret" Exp                                             -- return
    Param       = id ("=" Var)?
    MatchExp    = ("match" IdExp "with" "|"? Match
                  ("|" Match)* ("|" "_" "->" (Block | Var))?)
    Match       = Exp "->" (Block | Var)

    Exp         = Exp orOp BoolAndExp
                | BoolAndExp                                           -- pass
    BoolAndExp  = BoolAndExp andOp RelExp
                | RelExp                                               -- pass
    RelExp      = AddExp relOp AddExp
                | AddExp                                               -- pass
    AddExp      = AddExp addOp MulExp
                | MulExp                                               -- pass
    MulExp      = MulExp mulOp ExponExp
                | ExponExp                                             -- pass
    ExponExp    = PrefixExp exponOp AddExp
                | PrefixExp                                            -- pass
    PrefixExp   = prefixOp? ParenExp
    ParenExp    = "(" Exp ")"
                | Var                                                  -- pass
    Var         = (boolLit | IdExp | List | Tuple | Dictionary
                | intLit | floatLit | stringLit)

    IdExp       = id (periodId | Arguments | IdSelector)* idPostOp?
    periodId    = "." id
    Arguments   = "(" (Var ("," Var)*)? ")"
    IdSelector  = "[" Var "]"
    idPostOp    = "++" | "--"

    List        = "[" (Var ("," Var)*)? "]"
    Tuple       = "(" (Var ("," Var)*)? ")"
    Dictionary  = "{" (IdValuePair ("," IdValuePair)*)? "}"
    IdValuePair = id ":" Var

    orOp        = "||"
    andOp       = "&&"
    exponOp     = "^"
    assignOp    = "=" | "+=" | "-=" | "*=" | "/="
    addOp       = "+" | "-"
    mulOp       = "*" | "//" | "/" | "%"
    relOp       = "<=" | "<" | "==" | "!=" | ">=" | ">"
    prefixOp    = "--" | "-" | "!" | "++"

    boolLit     = "True" | "False"
    intLit      = ~floatLit digit+
    floatLit    = digit+ "." digit+
    stringLit   = "\"" ("\\\"" | (~"\"" any))* "\""

    keyword     = ("class" | "true" | "false" | "match" | "with" | "if"
                | "else" | "while" | "for" | "in" | "this" | "print" | "ret") ~idrest
    id          = ~keyword lower idrest*                               -- identifier
                | constId
    idrest      = "_" | alnum
    constId     = ~keyword upper ("_" | upper)*
    classId     = upper idrest*

    space      += comment
    comment     = "#" (~"\n" any)* "\n"
}
