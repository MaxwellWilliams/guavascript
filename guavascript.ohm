Guavascript {
    Program     = Block
    Block       = Statement+
    Statement   = BoolOrExp "?" RtnBlock ":" RtnBlock                   -- conditionalStatement
                | id "(" (Param ("," Param)*)? ")"
                  "{" RtnBlock "}"  -- funcDeclStatement
                | "class" classId "{" Block "}"                         -- classDeclStatement
                | ("match" IdExp "with" "|"? Match
                  ("|" Match)* ("|" "_" "->" (RtnBlock | BoolOrExp | Assign))?) -- matchStatement
                | "if" BoolOrExp "{" RtnBlock "}" ("else" "{" RtnBlock "}")?  -- ifElseStatement
                | "while" BoolOrExp "{" RtnBlock "}"                          -- whileStatement
                | "for" id "in" IdExp "{" RtnBlock "}"                  -- forInStatement
                | "print" "(" BoolOrExp ")"                             -- printStatement
                | Assign                                                -- assignStatement
                | IdExp                                                 -- IdExp
    RtnBlock    = Block Rtn                                             -- ReturnBlock
    	          | Block
                | Rtn
    Rtn         = "ret" BoolOrExp
    Param       = id ("=" VarExp)?
    Match       = BoolOrExp "->" (RtnBlock | BoolOrExp | Assign)

    Assign      = id assignOp BoolOrExp                                -- IdExp
    BoolOrExp   = BoolOrExp orOp BoolAndExp                            -- boolOrExp
                | BoolAndExp
    BoolAndExp  = BoolAndExp andOp RelExp                              -- boolAndExp
                | RelExp
    RelExp      = AddExp relOp AddExp                                  -- relExp
                | AddExp
    AddExp      = AddExp addOp MulExp                                  -- addExp
                | MulExp
    MulExp      = MulExp mulOp ExponExp                                -- mulExp
                | ExponExp
    ExponExp    = PrefixExp exponOp AddExp                             -- exponExp
                | PrefixExp
    PrefixExp   = prefixOp? Exp1
    Exp1        = VarExp
                | "(" BoolOrExp ")"                                          -- parenExp
    VarExp      = (boolLit | IdExp | List | Tuple | Dictionary
                | intLit | floatLit | stringLit)

    IdExp       = id ("." id)* (Arguments | IdSelector)* idPostOp?
    Arguments   = "(" (VarExp ("," VarExp)*)? ")"
    IdSelector  = "[" VarExp "]"
    idPostOp    = "++" | "--"

    List        = "[" (VarExp ("," VarExp)*)? "]"
    Tuple       = "(" (VarExp ("," VarExp)*)? ")"
    Dictionary  = "{" (IdValuePair ("," IdValuePair)*)? "}"
    IdValuePair = id ":" VarExp

    orOp        = "||"
    andOp       = "&&"
    exponOp     = "^"
    assignOp    = "=" | "+=" | "-=" | "*=" | "/="
    addOp       = "+" | "-"
    mulOp       = "*" | "//" | "/" | "%"
    relOp       = "<=" | "<" | "==" | "!=" | ">=" | ">"
    prefixOp    = "--" | "-" | "!" | "++"

    boolLit     = "True" | "False"
    intLit      = ~floatLit digit+
    floatLit    = digit+ "." digit+
    stringLit   = "\"" ("\\\"" | (~"\"" any))* "\""

    keyword     = ("class" | "true" | "false" | "match" | "with" | "if"
                | "else" | "while" | "for" | "in" | "this" | "print" | "ret") ~idrest
    id          = ~keyword lower idrest*                               -- identifier
                | constId
    idrest      = "_" | alnum
    constId     = ~keyword upper ("_" | upper)*
    classId     = upper idrest*

    space      += comment
    comment     = "#" (~"\n" any)* "\n"
}
